//
//  EpisodesAPI_Helper.swift
//  RickAndMorty
//
//  Created by Chinedu Uche on 29/11/2023.
//

import Foundation



class EpisodesAPI_Helper{
    static private let baseURL_String = "https://rickandmortyapi.com/api/episode"
    private static let decoder = JSONDecoder()
    private static let cache: NSCache<NSString, CacheEntryObject> = NSCache()

    
    
    private static func fetch(urlString: String) async throws -> Data {
          // convert url string into a URL **safely**
          guard
              let url = URL(string: urlString)
          else {throw API_Errors.CANNOT_CONVERT_STRING_TO_URL}
          
        if let cached = cache[url] {
            switch cached {
            case let .inProgress(task):
                return try await task.value
            case let .ready(data):
                return data
            }
        }
        
        print(urlString)

        
        let task = Task {
            // create a datatask to fetch the information from the URL
            let (data, _) = try await URLSession.shared.data(from: url)
            return data
        }
        
        cache[url] = .inProgress(task)
        do{
            let data = try await task.value
            cache[url] = .ready(data)
            return data
        } catch {
            cache[url] = nil
            throw error
        }
      }
      
      public static func fetchEpisodes(offset: Int = 0, limit: Int = 20) async throws -> Episodes {
          guard
              var urlComp = URLComponents(string: baseURL_String)
          else {throw API_Errors.cannotCreateURLComponent}
          
          var queryItems = [URLQueryItem]()
          queryItems.append(URLQueryItem(name: "offset", value: String(offset)))
          queryItems.append(URLQueryItem(name: "limit", value: String(limit)))

          urlComp.queryItems = queryItems
          
          do {
  //            let data = try await fetch(urlString: "\(baseURL)?offset=\(offset)&limit=\(limit)")
              print("this is the url generated by urlComp: \(urlComp.string!)")
              let data = try await fetch(urlString: urlComp.string!)
              let result = try decoder.decode(Episodes.self, from: data)
              return result
          } catch {
              throw error
          }
      }
    
    
    public static func fetchEpisodesDetails(urlString: String) async throws -> EpisodeDetails {
           do {
               let data = try await fetch(urlString: urlString)
               let result = try decoder.decode(EpisodeDetails.self, from: data)
               return result
           } catch {
               throw error
           }
       }
    
    
    }
